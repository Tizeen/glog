<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Log on Glog</title>
    <link>http://localhost:1313/tags/log/</link>
    <description>Recent content in Log on Glog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 25 May 2025 04:40:56 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/log/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>白日梦想家</title>
      <link>http://localhost:1313/2025/05/25/%E7%99%BD%E6%97%A5%E6%A2%A6%E6%83%B3%E5%AE%B6/</link>
      <pubDate>Sun, 25 May 2025 04:40:56 +0000</pubDate>
      <guid>http://localhost:1313/2025/05/25/%E7%99%BD%E6%97%A5%E6%A2%A6%E6%83%B3%E5%AE%B6/</guid>
      <description>&lt;p&gt;What is Life？&lt;/p&gt;&#xA;&lt;p&gt;Just find yourself and be yourself.&lt;/p&gt;&#xA;&lt;p&gt;Just try it and enjoy.&lt;/p&gt;</description>
    </item>
    <item>
      <title>20250323</title>
      <link>http://localhost:1313/2025/03/24/20250323/</link>
      <pubDate>Mon, 24 Mar 2025 14:26:00 +0000</pubDate>
      <guid>http://localhost:1313/2025/03/24/20250323/</guid>
      <description>&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;  &lt;li&gt;&#xA;    S3 的生命周期规则，不是说删除后就立刻停止，对于已经应用了规则的对象，即使中途将规则删除了，那么这些对象依旧会运行删除的规则&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    断点续传的时间可以是 1 天、1 周，甚至更长，对于云存储的业务，特别要注意这点，不然可能会出问题。&lt;br /&gt;提前删除未上传完成的对象分片，导致断点续传失效，然后客户端也没有做失败后从头开始上传的逻辑，最终导致线上事故。&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    Yaml 文件中也是可以引用参数的，通过 ${name} 即可。&lt;br /&gt;我们可以通知此功能，在 K8S 中，将关键信息放到 secret 保存，通过环境变量挂在到 Pod 中，然后在 Yaml 中引用，最终能实现敏感信息单独存放 secret，控制人员的访问的权限避免泄漏，Pod Shell 的权限也需要管控。&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    当使用 Cloudfront 时，源站是 ALB，可以通过 AWS-managed prefix list for CloudFront 添加到 ALB 安全组中，就能做到只有 Cloudfront 节点能访问源站了，避免了源站直接对 ALL 开放。&lt;br /&gt;如果需要指定特定的 Cloudfront，还可以通过请求头匹配的方式，在 Cloudfront 中添加回源请求头，然后 ALB 的规则中加上对应的请求头匹配。&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    Athena 查询速度提升，可以通过分区表来缩小查询范围，从而提升查询速度。&#xA;  &lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>20250215</title>
      <link>http://localhost:1313/2025/02/15/20250215/</link>
      <pubDate>Sat, 15 Feb 2025 02:26:51 +0000</pubDate>
      <guid>http://localhost:1313/2025/02/15/20250215/</guid>
      <description>&lt;p&gt;近几个月有点恍惚，回想一下好像没做什么，简单列一下做的内容&lt;/p&gt;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;  &lt;li&gt;&#xA;    AWS CloudWatch 的告警触发，在告警不恢复的情况，默认不会再触发第二次，需要使用 Step Function 来定期检查状态，不恢复时再次通知&lt;br /&gt;&lt;a href=&#34;https://aws.amazon.com/cn/blogs/china/use-aws-step-functions-to-implement-continuous-amazon-cloudwatch-alarms/&#34;&gt;https://aws.amazon.com/cn/blogs/china/use-aws-step-functions-to-implement-continuous-amazon-cloudwatch-alarms/&lt;/a&gt;&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    告警聚合，避免告警轰炸，同时在告警方面，也要避免告警单点，或者要有对应的告警升级机制。告警升级机制也许是比较合理的，多人同时告警，可能会导致大家互相认为对方会处理&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    AWS CloudFront 迁移方案，新的 CloudFront 的域名可以用 *.example.com 替代的，它的匹配逻辑是先精确匹配，后续会模糊匹配&lt;br /&gt;&lt;a href=&#34;https://aws.amazon.com/cn/blogs/china/smoothly-migrate-alternative-domain-names-to-other-accounts/&#34;&gt;https://aws.amazon.com/cn/blogs/china/smoothly-migrate-alternative-domain-names-to-other-accounts/&lt;/a&gt;&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    Gitlab CI 测试，大致了解了 Runner 的各种类型，当时一直被 Instance 类型的 Runner 迷惑，后续才发现 Instance 类型的 Runner 是在这个 Instance 上再通过 Docker Container 运行 Runner，而我的需求是把这个 EC2 变成 Runner，所以采用 ssh 类型就好了&lt;br /&gt;The instance executor is an autoscale-enabled executor that creates instances on demand to accommodate the expected volume of jobs that the runner manager processes.&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    AWS 成本根据 tag 来细分，需要在 cost 中配置对应的 tag 分账才会生效，默认是没有的&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    CloudWatch exporter 测试，用来获取所有队列的监控信息，Prometheus 再抓取数据，从而可以利用 PromQL 来实现比 CloudWatch 更复杂的告警语句&lt;br /&gt;我们想实现死信队列的消息数监控，并且队列名是变化的，使用 CloudWatch 一直没找到模糊查询的 SQL 写法&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    K8S 大型集群中，需要注意 CoreDNS 的性能和指标&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    对于网关等关键入口，可以增加请求成功率的监控，这个指标能快速发现问题&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    Karpenter 组件的升级，v1.0 版本大调整，升级难度增加很多，但同时也增加了对 Karpenter 的熟悉&lt;br /&gt;IAM Role 的变更比较麻烦，安装的时候和官方啊的步骤有些差异，导致升级的难度增加&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    GitOps 实践，ArgoCD 安排上了&#xA;  &lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>CDN资源被盗刷记录</title>
      <link>http://localhost:1313/2024/08/20/cdn%E8%B5%84%E6%BA%90%E8%A2%AB%E7%9B%97%E5%88%B7%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Tue, 20 Aug 2024 02:17:45 +0000</pubDate>
      <guid>http://localhost:1313/2024/08/20/cdn%E8%B5%84%E6%BA%90%E8%A2%AB%E7%9B%97%E5%88%B7%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;问题&#34;&gt;问题&lt;/h2&gt;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;  &lt;li&gt;&#xA;    带宽使用从平时的 2Gbps 提升到了 20Gbps&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    每日的 CDN 费用从 2000 上涨到了 20000&#xA;  &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;处理&#34;&gt;处理&lt;/h2&gt;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;  &lt;li&gt;&#xA;    通过监控发现，现状已经持续了 5 天左右&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    查看运营报表（阿里云自带），发现有几个特定的 IP 一直在访问一个 APK 资源，并且过去 7 天下载了 1.4PB 的流量&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    在 CDN 控制台中封禁这些 IP，带宽使用下降&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    发现攻击者切换 IP ，继续访问这个 APK 资源，带宽使用上涨&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    配置此资源下载限速，一开始配置的 20MB，发现仅对单次连接生效，效果不佳，降低到最低限速 100Kb，带宽使用下降&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    攻击者还是在切换 IP 持续访问&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    确定资源是 2020 年的资源，目前已不在使用&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    从源站中重命名资源，刷新 CDN 缓存，从而清除 CDN 中的缓存&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    此时再访问资源 404，带宽使用恢复&#xA;  &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;思考&#34;&gt;思考&lt;/h2&gt;&#xA;&lt;p&gt;存在的问题：&lt;/p&gt;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;  &lt;li&gt;&#xA;    没有及时发现流量被盗刷&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    没有限速机制&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    历史资源没有生命周期管理机制，一直存在&#xA;  &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;如果攻击者更换了新的 IP 和资源，我们应该怎么办？&lt;/p&gt;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;  &lt;li&gt;&#xA;    需要考虑使用其他的特征来进行封禁，例如 User-Agent、Referer 等内容&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    考虑接入 WAF ，利用 WAF 来封禁&#xA;  &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;应该如何防止此类事件？&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;  &lt;li&gt;&#xA;    添加监控。对于按使用量计算的指标，可以添加对应的上限监控。例如：带宽、流量、费用&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    配置下载限速&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    建立资源的生命周期机制。没有资源的下线机制，冗余资源会越来越多&#xA;  &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;为什么被刷&#34;&gt;为什么被刷&lt;/h2&gt;&#xA;&lt;p&gt;网络上看到的解释，对比当时的场景十分符合，针对一个 url 不停的下载，去平衡 pcdn 的下载流量，避免家庭带宽上传过多被运营商封禁。&lt;figure class=&#34;wp-block-image size-large&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>对自己职业的思考</title>
      <link>http://localhost:1313/2024/04/14/%E5%AF%B9%E8%87%AA%E5%B7%B1%E8%81%8C%E4%B8%9A%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <pubDate>Sun, 14 Apr 2024 04:16:39 +0000</pubDate>
      <guid>http://localhost:1313/2024/04/14/%E5%AF%B9%E8%87%AA%E5%B7%B1%E8%81%8C%E4%B8%9A%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <description>&lt;p&gt;近期，离开做了 3 年的公司，去了新公司，引起了我对自己整个职业过程的一些思考。&lt;/p&gt;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;过去的总结&#34;&gt;过去的总结&lt;/h3&gt;&#xA;&lt;p&gt;回想过去，主要可以分为以下阶段：&lt;/p&gt;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;  &lt;li&gt;&#xA;    入门阶段。刚毕业踏入的一个公司，是我踏入 Linux 世界的引导者，当时办公都是用 Ubuntu ，也为后来做运维工作打下基础。&lt;br /&gt;总体来说，当时时间很多，自己却没有方向，也没有寻求别人的意见，欠缺主动学习，也许当时稍微改变，后续的路线也会发生翻天覆地的变化。&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    进步阶段。来到深圳入职新公司，无比饥渴的学习各种各样的知识，K8S、持续集成部署。&lt;br /&gt;总体来说，接触了很多新东西，也算是走上了运维这条路，但是部门只有我一个运维，领导也给不了太多建议，自己也没有从外界获取相应的内容，逐渐迷茫至离职。回想起来，很多事情其实能做到更好，也能得到更多的进步，而自己却没有做到。&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    停滞阶段。跳槽下一家做 DevOps，吃老本，Azure DevOps。&lt;br /&gt;总体来说，吃老本，没有什么新突破，换汤不换药，到最后出走，最大的幸运是找到了未来老婆。&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    云运维阶段。再来到下一家，进入云服务运维阶段，阿里云、AWS、IOT，同时也涉及到了一些运维开发工作。&lt;br /&gt;总体来说，个人成熟很多，也接触了更多新东西，技能的面也有了扩展，但还是缺乏独当一面的能力。&#xA;  &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;回顾整个工作进程，总感觉自己有很多地方做的不够好&lt;/p&gt;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;  &lt;li&gt;&#xA;    积累太少。很多都是一点一点积累起来的，而自己有时执着于工具，而忽略了内容的重要性，经常放弃过去积累的东西，而不是去修补，去完善，导致进步缓慢。&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    思考太少。体现在对问题、对当下、对未来的思考太少，喜欢逃避。很多事情其实能做到更好，总是后知后觉。&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    交流太少。同行交流太少，也容易对网上的观点嗤之以鼻，不以为意，不深入思考。&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    不够系统。一件事情只知其，不知其所以然。通过搜索解决了问题，后续却没有做整体学习，导致学到的知识生硬。&#xA;  &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 class=&#34;wp-block-heading&#34; id=&#34;未来的想法&#34;&gt;未来的想法&lt;/h3&gt;&#xA;&lt;p&gt;在新公司整理了当前的业务情况，个人有点悲哀，业务的云化程度很高，在我看来很多事情其实开发在简单理解之后也能胜任，我需要考虑我能为团队带来什么。&lt;/p&gt;&#xA;&lt;p&gt;云服务时代，降低了纯业务运维的重要性，使得开发可以兼当运维，在不算很大的场景下，这种方式能降低人员成本。&lt;/p&gt;&#xA;&lt;p&gt;对当前工作是有一点悲观，也许发展前景不算太好，但总要养家糊口，还需要自己找到突破口。&lt;/p&gt;&#xA;&lt;p&gt;大的方面：&lt;/p&gt;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;  &lt;li&gt;&#xA;    &lt;strong&gt;学习方法调整&lt;/strong&gt;。凡事讲究一个 What-How-Why，多积累，定期回顾。&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    &lt;strong&gt;慢下来，也许会更快&lt;/strong&gt;。一开始不要太过追求知识的全面性，有的时候更多是自己觉得掌握了，但一到实操却发现啥也不会，这时不如先掌握一个知识点，再以点破面。&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    &lt;strong&gt;自信&lt;/strong&gt;。不够自信，有的时候太在乎别人的看法。&#xA;  &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;工作内容思考：&lt;/p&gt;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;  &lt;li&gt;&#xA;    成本。云服务时代，成本的重视程度要提高。&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    可观测。服务的可观测性，在微服务时代，服务的数量很多，提高可观测性，在问题发生时可以提供有效的排查数据。&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    开发能力(自动化)。开发不是只局限于业务系统，并不是写业务才算开发，更多的时候要考虑用机器帮你完成事情，而不是自己手动完成。&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    AI 能力。接轨 AI 时代，利用 AI 来提升自己的能力。&#xA;  &lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
  </channel>
</rss>
