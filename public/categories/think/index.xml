<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Think on Glog</title>
    <link>http://localhost:1313/categories/think/</link>
    <description>Recent content in Think on Glog</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 25 May 2025 04:40:56 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/think/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>白日梦想家</title>
      <link>http://localhost:1313/2025/05/25/%E7%99%BD%E6%97%A5%E6%A2%A6%E6%83%B3%E5%AE%B6/</link>
      <pubDate>Sun, 25 May 2025 04:40:56 +0000</pubDate>
      <guid>http://localhost:1313/2025/05/25/%E7%99%BD%E6%97%A5%E6%A2%A6%E6%83%B3%E5%AE%B6/</guid>
      <description>&lt;p&gt;What is Life？&lt;/p&gt;&#xA;&lt;p&gt;Just find yourself and be yourself.&lt;/p&gt;&#xA;&lt;p&gt;Just try it and enjoy.&lt;/p&gt;</description>
    </item>
    <item>
      <title>对业务高可用的思考</title>
      <link>http://localhost:1313/2024/11/19/%E5%AF%B9%E4%B8%9A%E5%8A%A1%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <pubDate>Tue, 19 Nov 2024 14:56:54 +0000</pubDate>
      <guid>http://localhost:1313/2024/11/19/%E5%AF%B9%E4%B8%9A%E5%8A%A1%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <description>&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;解决单点&#34;&gt;解决单点&lt;/h2&gt;&#xA;&lt;p&gt;在高可用中，应该避免单点的存在&lt;/p&gt;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;  &lt;li&gt;&#xA;    业务服务多副本&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    controller 控制器多副本&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    多可用区部署&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    NAT 多公网 IP 出口&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    数据库等中间件可以采取主从模式，单点故障时可以快速切换&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    告警单点，避免告警接口人在一个人身上，导致通知失败&#xA;  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;资源确保&#34;&gt;资源确保&lt;/h2&gt;&#xA;&lt;p&gt;资源的量需要有保障，避免出现资源不足的情况&lt;/p&gt;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;  &lt;li&gt;&#xA;    对于 K8S 中关键性的组件，确保有足够的资源。我们可以利用 Affinity 和 Taints 机制，确保关键组件运行在单独的节点池上，避免受到其他业务的影响。&#xA;  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;  &lt;li&gt;&#xA;    常规业务，需要规划好 requests 和 limits，合理分配资源，配合资源监控，及时调整，避免资源浪费或者不够。&#xA;  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;  &lt;li&gt;&#xA;    可以利用 Karpneter 或者 Cluster Autoscaler 等组件，动态扩展节点池，确保计算资源足够&#xA;  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;监控完善&#34;&gt;监控完善&lt;/h2&gt;&#xA;&lt;p&gt;利用 Prometheus 和 Grafana 监控资源利用和业务相关指标，制定高优先级告警规则，及时发现问题&lt;/p&gt;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;  &lt;li&gt;&#xA;    中间件监控，CPU、内存、连接数、主从读写延时、消息堆积等等指标&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    容器资源使用监控，流量敏感型服务需要添加流量监控&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    应用监控和链路追踪，从应用内部获取到处理是否有异常并及时告警&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    异常日志监控&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    网关层监控，用量波动和大批量错误发生时应及时告警&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    云产品 Quota 监控，不够时及时申请更多的 Quota&#xA;  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;在告警的时候，需要有相应的重复机制，在一段时间内未恢复，需要再次提醒，同时也可以考虑告警上升机制。&lt;/p&gt;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;兜底机制&#34;&gt;兜底机制&lt;/h2&gt;&#xA;&lt;p&gt;在设计系统的时候，需要考虑出现问题之后如何兜底&lt;/p&gt;&#xA;&lt;ul class=&#34;wp-block-list&#34;&gt;&#xA;  &lt;li&gt;&#xA;    重试，业务内部可以添加重试机制，例如在下载 S3 文件的时候，就可以添加重试机制&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    重连，对于中间件的连接应具备重连机制，避免中间件出现主从切换、引擎补丁安装重启之后自动重连回来&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    数据备份，开启云数据库的实时备份，可以快速恢复到备份期限内特定时间点的数据，定期检查备份的有效性&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    K8S 的就绪检查（Readiness Probe）和健康检查（Liveness Probe）配置，确保健康检查不可用时触发 K8S 的重启机制&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    入口流量快速切换。应该准备备用链路，在遇到特殊情况下，可以快速增加入口流量带宽或者切换到备用入口&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    限流机制，业务应该有相应的限流机制，避免系统被突然的大流量击垮，导致无法提供服务&#xA;  &lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;总结&#34;&gt;总结&lt;/h2&gt;&#xA;&lt;p&gt;不出问题不代表没有问题，很多时候需要系统的考虑哪里可能出问题，应该如何避免，以及出问题之后有哪些处理措施。&lt;/p&gt;&#xA;&lt;p&gt;平时也需要多加演练，在故障发生时也能更加胸有成竹。&lt;/p&gt;</description>
    </item>
    <item>
      <title>对CI、CD的理解记录</title>
      <link>http://localhost:1313/2024/05/14/%E5%AF%B9ci%E3%80%81cd%E7%9A%84%E7%90%86%E8%A7%A3%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Tue, 14 May 2024 14:37:35 +0000</pubDate>
      <guid>http://localhost:1313/2024/05/14/%E5%AF%B9ci%E3%80%81cd%E7%9A%84%E7%90%86%E8%A7%A3%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;p&gt;近期又接触了阿里云 flow 这个工具，发现自己对 CI、CD 这块一直没有比较成型的记忆，所以简单整理记录一下。&lt;/p&gt;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;ci-cd是什么&#34;&gt;CI CD是什么&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&#34;&gt;&#xA;  &lt;p&gt;&#xA;  &lt;/p&gt;&#xA;&lt;p&gt;&lt;cite&gt;CI：持续集成，开发人员在每次更改代码后都会将代码提交到版本控制系统。然后，CI 服务器会自动构建、测试和验证代码。&lt;br /&gt;&lt;br /&gt;CD：持续交付/部署，持续部署到服务器中。&lt;/cite&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;CI、CD 的整个过程都是围绕着自动化产生的，力求做到更快、更可靠的交付。&lt;/p&gt;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;制品&#34;&gt;制品&lt;/h2&gt;&#xA;&lt;p&gt;制品可以理解是 CI 的产物，它可以是一个 Jar 包、一个 Docker 镜像、一个二进制文件。&lt;/p&gt;&#xA;&lt;p&gt;制品是连接 CI 、CD 的传动轴。&lt;/p&gt;&#xA;&lt;p&gt;制品不应该是死的，应该给它赋予 &lt;strong&gt;元数据&lt;/strong&gt;，这些元数据可以标识制品是否被测试过、是否符合上线的标准，从而定义好 &lt;strong&gt;制品的生命周期&lt;/strong&gt;。Jfrog Artifactory 很好的体现了这一点，而 Nexus 只是单纯的存储仓库，想要做到元数据，还需要额外的系统进行配合。&lt;/p&gt;&#xA;&lt;p&gt;制品生命周期：&lt;/p&gt;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;  &lt;li&gt;&#xA;    开发阶段，对应 dev 仓库，保留最近15天的数据&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    测试阶段，对应 test 仓库，保留最近15天的数据&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    预发布阶段，对应 stage 仓库，制品永久保留&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    正式发布，对应 release 仓库，制品应该是从 stage 仓库 Promete 提升上来的，也需要永久保留&#xA;  &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 class=&#34;wp-block-heading&#34; id=&#34;如何设计ci-cd流水线&#34;&gt;如何设计CI CD流水线&lt;/h2&gt;&#xA;&lt;p&gt;目前主要接触过 2 种设计：&lt;/p&gt;&#xA;&lt;ol class=&#34;wp-block-list&#34;&gt;&#xA;  &lt;li&gt;&#xA;    CI、CD 所有功能都集中在一条 pipeline 中。这种方法适用于 pipeline 不复杂的情况，能够一步到位，完成所有事情。&#xA;  &lt;/li&gt;&#xA;  &lt;li&gt;&#xA;    CI、CD 分两条不同的 pipeline，各自负责相应的事情。通过制品使 CI、CD 关联起来，分开的 CI、CD 相对更加灵活，权限管控更加方便。&#xA;  &lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;串行和并行：例如代码扫描和编译和并行执行，提升效率&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
